# app/docker-compose-prod.yml
# Configuração para o ambiente de produção usando Docker Compose
# Destinado a ser executado em uma instância EC2 com AWS RDS PostgreSQL

services:
  # Serviço Nginx como proxy reverso
  nginx:
    image: nginx:latest # Usar latest é aceitável para este exemplo de curso
    ports:
      - "80:80" # Mapeia a porta 80 do host (EC2) para a porta 80 do contêiner Nginx
    volumes:
      # Monta o arquivo de configuração do Nginx.
      # Este arquivo precisará ser copiado para a instância EC2 pelo Ansible.
      - ./conf/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      # Garante que o Nginx só inicie após a aplicação e as migrações
      app:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    networks:
      - app_network # Conecta o Nginx à rede da aplicação

  # O serviço de banco de dados 'db' NÃO está presente aqui, pois usaremos AWS RDS.

  # Serviço da Aplicação Flask
  app:
    build:
      # Constrói a imagem a partir do Dockerfile na pasta atual (assumindo que o Dockerfile está em ./app)
      # O contexto de build será a pasta app/ clonada na EC2
      context: ./ # Ajuste se o Dockerfile estiver em outro lugar (ex: .)
      dockerfile: Dockerfile
    image: todolist:prod # Tag para a imagem de produção
    volumes:
      # Volume para a pasta instance (se necessário para a app)
      # Pode ser útil para logs ou arquivos de configuração gerados em tempo de execução
      - app_instance_data:/app/instance # Volume nomeado para persistência da pasta instance
    environment:
      # Variáveis de ambiente que a SUA APLICAÇÃO vai ler
      # Estas variáveis DEVEM ser passadas para o Ansible e definidas no ambiente do contêiner
      # A URL do banco de dados será para o RDS externo (lida do .env)
      DATABASE_URL: ${DATABASE_URL} # <=== Lendo de variável de ambiente (URL do RDS)
      SECRET_KEY: ${SECRET_KEY} # <=== Lendo de variável de ambiente (Segredo para Prod)
      FLASK_ENV: production # Define o ambiente para a fábrica (config.py)
      FLASK_APP: src/wsgi.py # Ponto de entrada da aplicação
      PYTHONPATH: /app/src # Inclui /app/src no caminho de importação do Python
      DEBUG: False # Desabilita o modo debug para produção
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - app_network # Conecta a App à rede

  # Serviço para rodar as migrações do banco de dados
  migrate:
    build:
      # Usa o mesmo contexto e Dockerfile da aplicação
      context: ./ # Ajuste se o Dockerfile estiver em outro lugar (ex: .)
      dockerfile: Dockerfile
    image: todolist:prod # Usa a mesma imagem construída
    environment:
      # Passa as mesmas variáveis de ambiente de BD que o serviço 'app' precisa
      # A URL do banco de dados será para o RDS externo (lida do .env)
      DATABASE_URL: ${DATABASE_URL} # <=== Lendo de variável de ambiente (URL do RDS)
      SECRET_KEY: ${SECRET_KEY} # <=== Lendo de variável de ambiente (Segredo para Prod)
      FLASK_ENV: production # Define o ambiente correto para carregar a config do BD
      FLASK_APP: src/wsgi.py # Testes precisam saber onde está a app factory
      PYTHONPATH: /app/src # Inclui /app/src no caminho de importação do Python
      # pytest pode precisar de outras variáveis de ambiente, se houver
    networks:
      - app_network # Conecta à rede
    # COMANDO: Verifica se a pasta migrations existe e inicializa se não, depois roda o upgrade
    # Este comando garante que o banco de dados esteja atualizado ao iniciar o ambiente
    command: ["sh", "-c", "if [ ! -d 'migrations' ]; then echo 'Pasta migrations não encontrada. Inicializando Flask-Migrate...'; flask db init; fi; echo 'Rodando migrações do banco de dados...'; flask db upgrade"]
    restart: "no" # Garante que este contêiner não tente reiniciar

# Define as redes usadas pelos serviços
networks:
  app_network: # Nome da rede para produção
    driver: bridge # Rede bridge padrão

# Define volumes nomeados para persistência de dados
volumes:
  app_instance_data: # Volume para a pasta instance da aplicação
