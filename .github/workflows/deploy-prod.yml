# Nome do workflow
name: Deploy to Production

# Gatilho do workflow: executa em pushes para a branch 'main'
on:
  push:
    branches:
     - main # <=== Dispara em pushes para a branch principal

     # Define um único job chamado 'deploy'
jobs:
  deploy:
    # Define o tipo de runner que o job será executado
    runs-on: ubuntu-latest

    # Define o ambiente de deploy no GitHub (opcional, mas boa prática)
    # Use um nome de ambiente diferente para produção
    environment: production # <=== Ambiente de deploy de produção no GitHub

    # Define variáveis de ambiente para o job.
    # Segredos são acessados usando ${{ secrets.NOME_DO_SEGREDO }}
    env:
      # Credenciais AWS (lidas dos GitHub Secrets)
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} # Opcional, se usar credenciais temporárias
      AWS_REGION: "us-east-1" # <--- Defina a região da AWS (ajuste conforme sua AWS Academy)

      # Nome do bucket S3 para o Terraform 
      TF_BUCKET: ${{ secrets.TF_BUCKET }} # Nome do bucket S3 para o Terraform (lido dos GitHub Secrets)
      TF_VAR_environment: "production"
      TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }} # Chave pública SSH (lida dos GitHub Secrets)

      # Estes DEVEM ser segredos diferentes dos de HML e Dev
      RDS_USERNAME_PROD: ${{ secrets.RDS_USERNAME_PROD }} # <=== Usuário do RDS de produção (Segredo)
      RDS_PASSWORD_PROD: ${{ secrets.RDS_PASSWORD_PROD }} # <=== Senha do RDS de produção (Segredo)
      TF_VAR_rds_username_prod:  ${{ secrets.RDS_USERNAME_PROD }}
      TF_VAR_rds_password_prod: ${{ secrets.RDS_PASSWORD_PROD }}

      # Segredos da aplicação para PRODUÇÃO (lidos dos GitHub Secrets)
      SECRET_KEY: ${{ secrets.SECRET_KEY_PROD }} # <=== Segredo para produção

      # Variável para o caminho do arquivo docker-compose de PRODUÇÃO dentro do repositório clonado
      DOCKER_COMPOSE_PROD_PATH: "app/docker-compose-prod.yml" # <=== Caminho para o arquivo de produção

      # Variável para o caminho COMPLETO do playbook Ansible (relativo à raiz do repo)
      ANSIBLE_PLAYBOOK_PATH: "ansible/playbook-prod.yml" # <=== Usaremos o mesmo playbook, mas ele precisará lidar com a lógica de produção

      # Variável para o caminho da pasta Terraform
      TERRAFORM_DIR: "terraform"

      # Variável para o caminho da pasta Ansible
      ANSIBLE_DIR: "ansible"

      # Variável para o NOME BASE do arquivo do playbook Ansible
      ANSIBLE_PLAYBOOK_BASENAME: "playbook-prod.yml" # <=== Nome base do playbook

      # Usuário SSH padrão para a instância EC2 (ajuste se necessário)
      SSH_USER: "ubuntu"

      # Caminho onde a chave privada SSH será salva temporariamente no runner
      SSH_PRIVATE_KEY_PATH_RUNNER: "~/.ssh/deployer_key_prod.pem" # <=== Usaremos a mesma chave SSH para acessar a instância EC2 de produção

      # Variável de ambiente para passar opções SSH para o cliente SSH do Ansible
      ANSIBLE_SSH_ARGS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

      # Variável de ambiente para a branch que disparou o workflow
      GITHUB_BRANCH: ${{ github.ref_name }}

    # Passos que serão executados neste job
    steps:
      # Passo 1: Faz o checkout do código do repositório
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Clona apenas o commit mais recente

      # Passo 2: Configura o ambiente Python (necessário para o Ansible)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a versão Python que você está usando no seu projeto

      # Passo 3: Configura o ambiente Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # terraform_version: "latest" # Opcional: fixar uma versão específica do Terraform
          # O backend S3 é configurado no main.tf e inicializado no passo 'Terraform Init'
          # Não passamos a configuração do backend aqui, apenas as variáveis
          cli_config_credentials_token: ${{ secrets.GITHUB_TOKEN }} # Opcional: se usar Terraform Cloud/Enterprise

      # Passo 4: Configura o ambiente Docker (incluindo Buildx)
      # Necessário para que o Ansible possa rodar comandos docker compose na instância remota
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Passo 5: Configura as credenciais AWS no runner
      # Permite que o Terraform e outros comandos AWS (se houver) interajam com sua conta
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }} # Opcional, se usar credenciais temporárias

      # Passo 6: Inicializa o Terraform
      # Navega para o diretório do Terraform e executa terraform init
      # O Terraform lerá as variáveis de ambiente TF_VAR_... para configurar o backend e as variáveis de entrada
      # Como TF_VAR_environment é "production", o backend usará a chave "production/terraform.tfstate"
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${TF_BUCKET}"
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Passo 7: Cria um plano de execução do Terraform (opcional)
      # Mostra o que o Terraform planeja criar/modificar/destruir
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Passo 8: Aplica o plano do Terraform
      # Provisiona a instância EC2 (t3.large), Security Group (production-app-security-group), Key Pair (production-deployer-key),
      # DB Subnet Group (prod-rds-subnet-group), Security Group do RDS (prod-rds-security-group) e a instância RDS.
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.TERRAFORM_DIR }}

      # Passo 9: Obtém os detalhes de conexão da instância EC2 e RDS provisionados
      # Usa as saídas do Terraform
      - name: Get Infrastructure Outputs
        id: get_outputs # Atribui um ID a este passo para referenciar suas saídas
        run: |
          # Obtém o IP público da instância EC2
          EC2_IP=$(terraform output -raw app_instance_public_ip)
          echo "EC2 Instance Public IP: $EC2_IP"
          echo "EC2_IP=$EC2_IP" >> $GITHUB_OUTPUT # Define o IP como saída deste passo

          # Obtém os detalhes de conexão do RDS de produção.
          # Estes outputs só existem se o ambiente for 'production'.
          # Usamos Bash para verificar se o output existe/tem valor antes de usá-lo.
          # Redirecionamos stderr para /dev/null para evitar que 'terraform output' falhe o script se o output não existir.
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint_prod 2>/dev/null || echo "")
          RDS_PORT=$(terraform output -raw rds_port_prod 2>/dev/null || echo "")
          RDS_DB_NAME=$(terraform output -raw rds_db_name_prod 2>/dev/null || echo "")
          # Use os outputs de debug para o username e password, se existirem
          RDS_USERNAME=$(terraform output -raw rds_username_prod_output 2>/dev/null || echo "")
          RDS_PASSWORD=$(terraform output -raw rds_password_prod_output 2>/dev/null || echo "")


          echo "RDS Endpoint: $RDS_ENDPOINT"
          echo "RDS Port: $RDS_PORT"
          echo "RDS DB Name: $RDS_DB_NAME"

          # Define os detalhes do RDS como saídas deste passo para uso em passos subsequentes
          # Apenas define as saídas se os valores não forem vazios (para evitar passar strings vazias)
          if [ -n "$RDS_ENDPOINT" ]; then
            echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
            echo "RDS_PORT=$RDS_PORT" >> $GITHUB_OUTPUT
            echo "RDS_DB_NAME=$RDS_DB_NAME" >> $GITHUB_OUTPUT
            echo "RDS_USERNAME=$RDS_USERNAME" >> $GITHUB_OUTPUT
            echo "RDS_PASSWORD=$RDS_PASSWORD" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ env.TERRAFORM_DIR }} # Executa o comando na pasta 'terraform'

      # Passo 10: Configura o SSH Agent e adiciona a chave privada
      # Permite que o Ansible se conecte à instância EC2 usando a chave privada
      # A chave privada é lida do GitHub Secret SSH_PRIVATE_KEY_HML
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_PROD }} # <=== Usa o segredo da chave privada

      # Passo 11: Instala o Ansible
      - name: Install Ansible
        run: pip install ansible

      # Passo 12: Cria o arquivo de inventário Ansible dinamicamente
      # Cria um arquivo inventory.ini com o IP da instância obtido do passo 9
      - name: Create Ansible Inventory
        run: |
          echo "[prod_instances]" > inventory.ini # <=== Grupo de hosts para produção
          echo "${{ steps.get_outputs.outputs.EC2_IP }} ansible_user=${{ env.SSH_USER }}" >> inventory.ini
        working-directory: ${{ env.ANSIBLE_DIR }} # Usa a variável ANSIBLE_DIR

      # Passo 13: Executa o playbook Ansible
      # Conecta à instância EC2 e executa as tarefas para configurar e fazer o deploy
      - name: Run Ansible Playbook
        run: |
          # Constrói a string de conexão do banco de dados para o RDS
          # Usamos os outputs do Terraform obtidos no passo 9
          # Apenas constrói a URL se o endpoint do RDS não for vazio (ou seja, se o RDS foi criado)
          DATABASE_URL=""
          if [ -n "${{ steps.get_outputs.outputs.RDS_ENDPOINT }}" ]; then
            DATABASE_URL="postgresql://${{ steps.get_outputs.outputs.RDS_USERNAME }}:${{ steps.get_outputs.outputs.RDS_PASSWORD }}@${{ steps.get_outputs.outputs.RDS_ENDPOINT }}:${{ steps.get_outputs.outputs.RDS_PORT }}/${{ steps.get_outputs.outputs.RDS_DB_NAME }}"
          fi

          ansible-playbook -i inventory.ini ${{ env.ANSIBLE_PLAYBOOK_BASENAME }} \
            --private-key ${{ env.SSH_PRIVATE_KEY_PATH_RUNNER }} \
            --extra-vars "secret_key_prod=${{secrets.SECRET_KEY_PROD }} deploy_branch=${{ env.GITHUB_BRANCH }} database_url_prod=${DATABASE_URL} rds_endpoint=${{ steps.get_outputs.outputs.RDS_ENDPOINT }} rds_port=${{ steps.get_outputs.outputs.RDS_PORT }}" \
            -vvv # Opcional: -vvv para saída mais detalhada do Ansible (útil para depuração)
        working-directory: ${{ env.ANSIBLE_DIR }}


